# HELP          =>  $ man configuration.nix  
# SEARCH PKGs   =>  $ nix-env -qaP | grep wget

{ config, pkgs, ... }:

{
    imports             =
        [ ./hardware-configuration.nix ];

    hardware            =   {
        opengl.driSupport32Bit  = true;
        pulseaudio.support32Bit = true;
        bluetooth.enable        = true; };

    boot                =   {
        kernelPackages      = pkgs.linuxPackages_latest;
        consoleLogLevel     = 5 ;
        kernelParams        = ["resume=/dev/nvme0n1p2" ];
        blacklistedKernelModules = ["nouveau"];
        initrd              = {
            checkJournalingFS   = false;   
            luks.devices        = [{
                name                = "root";
                device              = "/dev/nvme0n1p2";
                preLVM              = true;  }]; 
        };
        loader              = {
            grub                = {
                enable              = true;
                device              = "/dev/nvme0n1";
                extraConfig         = "GRUB_CMDLINE_LINUX_DEFAULT=\"resume=/dev/nvme0n1p2\"";
#               efiSupport          = true;
#               forceInstall        = true;
            };
#           systemd-boot.enable     = true;     
#           efi.canTouchEfiVariables= true;
        };
    };

    networking          =   {
        hostName            = "ghasshee";
        networkmanager      = {
            enable              = true;
        };
        nameservers         = [ "8.8.8.8" "8.8.4.4" ];
        firewall            = {
            enable              = false;
            allowPing           = true;
            allowedTCPPorts     = [ 8080 ];
            allowedUDPPorts     = [ ... ];
        };
    };

    i18n                =   {
        consoleFont         = "Lat2-Terminus16";
        consoleKeyMap       = "us";
        defaultLocale       = "en_US.UTF-8";
        inputMethod         = {
            enabled             = "ibus";
            ibus.engines        = with pkgs.ibus-engines; [ anthy m17n ]; };
    };

    time.timeZone       = "Asia/Tokyo";

    nix                 =   {
        binaryCaches        = [http://cache.nixos.org];
        #package            = pkgs.nix1;  ## this updates to 19.03
    }
    
    nixpkgs.config      = {
        allowUnfree         = true;
        allowBroken         = true;
        firefox.icedtea     = true;
    };

    environment         =   {
        etc."fuse.conf".text = ''user_allow_other'';
        systemPackages =
            let 
                patched-ghc822  = pkgs.haskell.packages.ghc822.override (old: {
                        overrides = self: super: {
                            #heap        = self.callHackage "heap" "0.6.0" {};
                            };}); 
                patched-ghc     = pkgs.haskellPackages.override (old:{
                        overrides = self: super: {
                            Euterpea    = self.callHackage "Euterpea" "2.0.6" {};
                            PortMidi    = self.callHackage "PortMidi" "0.1.6.1" {};
                            heap        = pkgs.haskell.lib.dontCheck super.heap;
                            };});
                py              = [
                    (pkgs (p: with p; [ python27Full pthon27Packages.pygments ]))
                    (pkgs.python36.withPackages (x: with x; [
                        python pip numpy matplotlib toolz pytest 
                        ipython jupyter virtualenvwrapper tkinter #tk
                        numpy scipy networkx matplotlib toolz ]))
                    pkgs.pypyPackages.virtualenv];
                hs              = [ 
                    (patched-ghc.ghcWithPackages (p: with p; [
                        cabal-install hoogle hakyll effect-monad hmatrix megaparsec
                        gnuplot GLUT Euterpea
                        # algebra 
                        base58-bytestring vector-sized mwc-random 
                        cryptonite secp256k1-haskell # secp256k1 
                    ]))];

                sys                     = with pkgs; 
                [
                    networkmanager acpi
    
                ## BASIC TOOLs
                    zsh vim bvi tmux w3m git curl wget gnused xsel
                    tree less jq mlocate unzip xz sl lolcat figlet man-db manpages
                    bc          # calculator
                    at          # scheduled process execution
                    sdcv        # Dictionary  

                ## Process/Memory 
                    lsof psutils htop fzf 
                    psmisc      # killall, pstree, ..etc
                    config.boot.kernelPackages.perf   ## linuxPackages.perf 
            
                ## SECURITY 
                    openssl.dev openssh gnupg sshfs stunnel  

                ## NETWORK
                    iptables nettools irssi tcpdump 
            
                ## X 
                    xorg.xmodmap xorg.xlibsWrapper
                    xlibs.xmodmap xlibs.xbacklight xterm tty-clock xcalib tk tcl          
                    numix-icon-theme-circle numix-gtk-theme
                    freeglut  ## For GLUT GPU culculation 

                ## Music/Video
                    pulseaudioLight ## pulseaudioFull     
                    dvdplusrwtools dvdauthor
                    espeak ffmpeg mplayer sox timidity 
                    gnome3.totem vlc    # kde4.dragon kde4.kmix 

                ## Applications
                    chromium firefoxWrapper thunderbird kdeApplications.okular mupdf evince vivaldi
                    sage            # Mathematica Alternative 
                    android-file-transfer
                    dropbox-cli xorg.libxshmfence atom djvu2pdf qrencode vokoscreen
                    docker 
                    maim            # command-line screenshot
                    gimp youtube-dl
                    gnome3.eog      # image viewer
                    tesseract       # OCR
                    timidity        # MIDI
                    minecraft       # Game

            ###################
            ###  Languages  ###
            ###################
                # systemd.lib systemd.dev libudev
                    stdenv  binutils.bintools makeWrapper cmake automake autoconf glibc gdb 
                    nodejs ruby jekyll

                # Idris
                    idris vimPlugins.idris-vim

                # OCaml
                    ocaml opam 
                    ocamlPackages.utop ocamlPackages.camlp4 
                    ocamlPackages.findlib ocamlPackages.batteries
                # coq
                    coq coqPackages_8_6.ssreflect

                # Rust with C dependencies 
                    rustup cargo 
                    binutils gcc gnumake openssl pkgconfig 
        
            ]; in sys ++ hs ++ py ;
    };
    

    services = {
        acpid           = {
            enable          = true;
        }; 
        redshift        = {
            enable          = true;
            latitude        = "40";
            longitude       = "135";
        };
        openssh         = {
            enable          = true;
        };
        xserver         = {
            enable          = true;
            layout          = "us";
            xkbOptions      = "eurosign:e";
            displayManager.slim = {
                enable      = true;
                defaultUser = "ghasshee";
                autoLogin   = true;
            };
            desktopManager.xfce.enable = true;
#           desktopManager.kde4.enable = true;
            synaptics       = {
                enable          = true;
#               tapButtons      = true;
                twoFingerScroll = true;
                horizontalScroll= true;
                vertEdgeScroll  = false;
                accelFactor     = "0.015";
                buttonsMap      = [1 3 2];
                fingersMap      = [1 3 2];
                additionalOptions = ''
                    Option "VertScrollDelta" "50"
                    Option "HorizScrollDelta" "-20"
                '';
            };
        };

#       multitouch.enable       = true;
#       multitouch.invertScroll = true;
        printing        = {
            enable          = true; # enable CUPS Printing 
            drivers         = [
                pkgs.gutenprint pkgs.hplipWithPlugin 
                pkgs.cups-bjnp pkgs.cups-dymo ];
        };
  
    };

    # Shells
    programs        = {
        zsh             = {
            enable = true;
            promptInit = "";
            interactiveShellInit = "";
        };
    };
    # environment.promptInit = "";
    # environment.interactiveShellInit = ""; 
    # User ( Do not forget to set with `passwd`
    users           = {
        users = {};

        extraUsers      = {
            ghasshee        = {
	            isNormalUser    = true;
	            home            = "/home/ghasshee";
	            extraGroups     = ["wheel" "networkmanager" "adbusers"];
      	        shell           = "/run/current-system/sw/bin/zsh";
                uid             = 1000;
            };
        };
    };
    
    # system.stateVersion = "19.03";

}

